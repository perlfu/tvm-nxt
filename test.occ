
#PRAGMA EXTERNAL "PROC C.tvmspecial.0.nx.display.clear () = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.1.nx.display.set.pos (VAL INT x, y) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.2.nx.display.string (VAL []BYTE str) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.3.nx.motors.rotate (VAL INT motor, speed) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.4.nx.motors.rotate.angle (VAL INT motor, speed, angle, VAL BOOL brake) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.5.nx.motors.rotate.time (VAL INT motor, speed, ms, VAL BOOL brake) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.6.nx.motors.stop (VAL INT motor, VAL BOOL brake) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.7.nx.motors.get.tach.count (VAL INT motor, RESULT INT count) = 0"

INLINE PROC nx.display.clear ()
  C.tvmspecial.0.nx.display.clear ()
:

INLINE PROC nx.display.set.pos (VAL INT x, y)
  C.tvmspecial.1.nx.display.set.pos (x, y)
:

INLINE PROC nx.display.string (VAL []BYTE str)
  C.tvmspecial.2.nx.display.string (str)
:

INLINE PROC nx.motors.rotate (VAL INT motor, speed)
  C.tvmspecial.3.nx.motors.rotate (motor, speed)
:

INLINE PROC nx.motors.rotate.angle (VAL INT motor, speed, angle, VAL BOOL brake)
  C.tvmspecial.4.nx.motors.rotate.angle (motor, speed, angle, brake)
:

INLINE PROC nx.motors.rotate.time (VAL INT motor, speed, ms, VAL BOOL brake)
  C.tvmspecial.5.nx.motors.rotate.time (motor, speed, ms, brake)
:

INLINE PROC nx.motors.stop (VAL INT motor, VAL BOOL brake)
  C.tvmspecial.6.nx.motors.stop (motor, brake)
:

INLINE PROC nx.motors.get.tach.count (VAL INT motor, RESULT INT count)
  C.tvmspecial.7.nx.motors.get.tach.count (motor, count)
:

PROC delay.ms (VAL INT ms)
  TIMER time:
  INT now:
  SEQ
    time ? now
    time ? AFTER (now PLUS ms)
:

PROC main ()
  WHILE TRUE
    SEQ
      nx.display.string ("Forward!*n")
      nx.motors.rotate (0, 100)
      delay.ms (1000)
      nx.motors.stop (0, FALSE)
      delay.ms (1000)
      nx.display.string ("Backward!*n")
      nx.motors.rotate (0, -100)
      delay.ms (1000)
      nx.motors.stop (0, FALSE)
      delay.ms (1000)
:
