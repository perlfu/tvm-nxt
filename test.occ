
#PRAGMA EXTERNAL "PROC C.tvmspecial.0.nx.display.clear () = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.1.nx.display.set.pos (VAL INT x, y) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.2.nx.display.string (VAL []BYTE str) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.3.nx.motors.rotate (VAL INT motor, speed) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.4.nx.motors.rotate.angle (VAL INT motor, speed, angle, VAL BOOL brake) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.5.nx.motors.rotate.time (VAL INT motor, speed, ms, VAL BOOL brake) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.6.nx.motors.stop (VAL INT motor, VAL BOOL brake) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.7.nx.motors.get.tach.count (VAL INT motor, RESULT INT count) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.8.nx.i2c.memory.init (VAL INT sensor, VAL BYTE address, VAL BOOL lego.compat) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.9.nx.i2c.memory.close (VAL INT sensor) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.10.nx.i2c.memory.read (VAL INT sensor, VAL BYTE address, []BYTE buffer, RESULT INT result) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.11.nx.i2c.memory.write (VAL INT sensor, VAL BYTE address, VAL []BYTE buffer, RESULT INT result) = 0"

INLINE PROC nx.display.clear ()
  C.tvmspecial.0.nx.display.clear ()
:

INLINE PROC nx.display.set.pos (VAL INT x, y)
  C.tvmspecial.1.nx.display.set.pos (x, y)
:

INLINE PROC nx.display.string (VAL []BYTE str)
  C.tvmspecial.2.nx.display.string (str)
:

INLINE PROC nx.motors.rotate (VAL INT motor, speed)
  C.tvmspecial.3.nx.motors.rotate (motor, speed)
:

INLINE PROC nx.motors.rotate.angle (VAL INT motor, speed, angle, VAL BOOL brake)
  C.tvmspecial.4.nx.motors.rotate.angle (motor, speed, angle, brake)
:

INLINE PROC nx.motors.rotate.time (VAL INT motor, speed, ms, VAL BOOL brake)
  C.tvmspecial.5.nx.motors.rotate.time (motor, speed, ms, brake)
:

INLINE PROC nx.motors.stop (VAL INT motor, VAL BOOL brake)
  C.tvmspecial.6.nx.motors.stop (motor, brake)
:

INLINE PROC nx.motors.get.tach.count (VAL INT motor, RESULT INT count)
  C.tvmspecial.7.nx.motors.get.tach.count (motor, count)
:

INLINE PROC nx.i2c.memory.init (VAL INT sensor, VAL BYTE address, VAL BOOL lego.compat)
  C.tvmspecial.8.nx.i2c.memory.init (sensor, address, lego.compat)
:

INLINE PROC nx.i2c.memory.close (VAL INT sensor)
  C.tvmspecial.9.nx.i2c.memory.close (sensor)
:

INLINE PROC nx.i2c.memory.read (VAL INT sensor, VAL BYTE address, []BYTE buffer, RESULT INT result)
  C.tvmspecial.10.nx.i2c.memory.read (sensor, address, buffer, result)
:

INLINE PROC nx.i2c.memory.write (VAL INT sensor, VAL BYTE address, VAL []BYTE buffer, RESULT INT result)
  C.tvmspecial.11.nx.i2c.memory.write (sensor, address, buffer, result)
:

VAL INT I2C.ERR.OK              IS 0:
VAL INT I2C.ERR.UNKNOWN.SENSOR  IS 1:
VAL INT I2C.ERR.NOT.READY       IS 2:
VAL INT I2C.ERR.TXN.FULL        IS 3:
VAL INT I2C.ERR.DATA            IS 4:

PROC delay.ms (VAL INT ms)
  TIMER time:
  INT now:
  SEQ
    time ? now
    time ? AFTER (now PLUS ms)
:

PROC display.hex (VAL INT x)
  VAL []BYTE lookup IS [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' ]:
  SEQ i = 0 FOR 4
    nx.display.string ([lookup FROM ((x >> (12 - (i * 4))) /\ #F) FOR 1 ])
:

VAL BYTE RADAR.VERSION                 IS #00:
VAL BYTE RADAR.PRODUCT.ID              IS #08:
VAL BYTE RADAR.SENSOR.TYPE             IS #10:
VAL BYTE RADAR.FACTORY.ZERO            IS #11:
VAL BYTE RADAR.FACTORY.SCALE.FACTOR    IS #12:
VAL BYTE RADAR.FACTORY.SCALE.DIVISOR   IS #13:
VAL BYTE RADAR.MEASUREMENT.UNITS       IS #14:
VAL BYTE RADAR.INTERVAL                IS #40:
VAL BYTE RADAR.OP.MODE                 IS #41:
VAL BYTE RADAR.R0                      IS #42:
VAL BYTE RADAR.R1                      IS #43:
VAL BYTE RADAR.R2                      IS #44:
VAL BYTE RADAR.R3                      IS #45:
VAL BYTE RADAR.R4                      IS #46:
VAL BYTE RADAR.R5                      IS #47:
VAL BYTE RADAR.R6                      IS #48:
VAL BYTE RADAR.R7                      IS #49:
VAL BYTE RADAR.CURRENT.ZERO            IS #50:
VAL BYTE RADAR.CURRENT.SCALE.FACTOR    IS #51:
VAL BYTE RADAR.CURRENT.SCALE.DIVISOR   IS #52:

VAL BYTE RADAR.MODE.OFF               IS #00:
VAL BYTE RADAR.MODE.SINGLE.SHOT       IS #01:
VAL BYTE RADAR.MODE.CONTINUOUS        IS #02:
VAL BYTE RADAR.MODE.RESET             IS #04:

PROC main ()
  [8]BYTE buffer:
  INT interval, result:
  SEQ
    nx.display.clear ()
    nx.i2c.memory.init (#0, #01, TRUE)
  
    INITIAL INT i IS 0:
    WHILE TRUE
      SEQ
        nx.display.set.pos (0, 0)
        display.hex (i /\ #FFFF)
        i := i + 1

        INITIAL BOOL ready IS FALSE:
        WHILE NOT ready
          SEQ
            SEQ i = 0 FOR SIZE buffer
              buffer[i] := #00
            nx.i2c.memory.read (#0, RADAR.SENSOR.TYPE, [ buffer FOR 8 ], result)
            IF
              result = I2C.ERR.OK
                SEQ
                  nx.display.set.pos (0, 1)
                  nx.display.string ([ buffer FOR 8 ])
                  ready := (buffer[0] = 'S') AND (buffer[1] = 'o') AND (buffer[2] = 'n') AND (buffer[3] = 'a') AND (buffer[4] = 'r')
              TRUE
                SKIP
            delay.ms (20)
        
        nx.i2c.memory.read (#0, RADAR.INTERVAL, [ buffer FOR 1 ], result)
        nx.display.set.pos (0, 2)
        display.hex (INT buffer[0])
        ASSERT (result = I2C.ERR.OK)
        delay.ms (20)

        SEQ
          nx.i2c.memory.read (#0, RADAR.R0, [ buffer FOR 1 ], result)
          nx.display.set.pos (0, 3)
          IF
            result = I2C.ERR.OK
              display.hex (INT buffer[0])
            TRUE
              nx.display.string ("E*n")
:
